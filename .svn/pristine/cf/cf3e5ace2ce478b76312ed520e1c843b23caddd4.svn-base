import { BehaviorSubject, Observable } from 'rxjs';
import { Injectable } from '@angular/core';
import { HttpHeaders, HttpClient } from '@angular/common/http';
import { UserAuthenticationService } from '../users/user-authentication.service';
import { Comment } from '../../classes/comment';
import { map, tap } from 'rxjs/operators';

@Injectable()
export class CommentService {
  private _serverURL = 'https://conduit.productionready.io';
  private _currentSlug = '';
  private _commentList: Comment[] = [];
  constructor(
    private http: HttpClient,
    private authService: UserAuthenticationService
  ) { }

  loadCommentsList(slug: string): void {
    this._currentSlug = slug;
    this.http.get(this._serverURL + '/api/articles/' + slug + '/comments').pipe(
      map(data => data['comments'] as Comment[]),
      tap(data => this._commentList = data)
    ).subscribe();
  }

  getCommentList(): BehaviorSubject<Comment[]> {
    return new BehaviorSubject(this._commentList);
  }

  addComment(body: string): Observable<Comment> {
    return this.http.post(this._serverURL + '/api/articles/' + this._currentSlug + '/comments', { "comment": { "body": body } }).pipe(
      map(data => data['comment']),
      tap(data => this._commentList.unshift(data))
    );
  }

  deleteComment(id: string, index: number): void {
    this._commentList.splice(index, 1);
    this.http.delete(this._serverURL + '/api/articles/' + this._currentSlug + '/comments/' + id).subscribe();
  }

  isOwner(comment: Comment) {
    return comment.author.username == this.authService.getCurrentUsername();
  }
}
